// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get loans(): Array<string> {
    let value = this.get("loans");
    return value.toStringArray();
  }

  set loans(value: Array<string>) {
    this.set("loans", Value.fromStringArray(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}

export class Loan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Loan entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Loan entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Loan", id.toString(), this);
  }

  static load(id: string): Loan | null {
    return store.get("Loan", id) as Loan | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get loaned(): BigDecimal {
    let value = this.get("loaned");
    return value.toBigDecimal();
  }

  set loaned(value: BigDecimal) {
    this.set("loaned", Value.fromBigDecimal(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get uTokenAmount(): BigDecimal {
    let value = this.get("uTokenAmount");
    return value.toBigDecimal();
  }

  set uTokenAmount(value: BigDecimal) {
    this.set("uTokenAmount", Value.fromBigDecimal(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }

  get uTokenAddress(): string {
    let value = this.get("uTokenAddress");
    return value.toString();
  }

  set uTokenAddress(value: string) {
    this.set("uTokenAddress", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}

export class DailyToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DailyToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DailyToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DailyToken", id.toString(), this);
  }

  static load(id: string): DailyToken | null {
    return store.get("DailyToken", id) as DailyToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get uTokenAddress(): string {
    let value = this.get("uTokenAddress");
    return value.toString();
  }

  set uTokenAddress(value: string) {
    this.set("uTokenAddress", Value.fromString(value));
  }

  get mintCount(): BigInt {
    let value = this.get("mintCount");
    return value.toBigInt();
  }

  set mintCount(value: BigInt) {
    this.set("mintCount", Value.fromBigInt(value));
  }

  get burnCount(): BigInt {
    let value = this.get("burnCount");
    return value.toBigInt();
  }

  set burnCount(value: BigInt) {
    this.set("burnCount", Value.fromBigInt(value));
  }

  get mintUnboundToken(): BigDecimal {
    let value = this.get("mintUnboundToken");
    return value.toBigDecimal();
  }

  set mintUnboundToken(value: BigDecimal) {
    this.set("mintUnboundToken", Value.fromBigDecimal(value));
  }

  get burnUnboundToken(): BigDecimal {
    let value = this.get("burnUnboundToken");
    return value.toBigDecimal();
  }

  set burnUnboundToken(value: BigDecimal) {
    this.set("burnUnboundToken", Value.fromBigDecimal(value));
  }

  get lockPoolToken(): BigDecimal {
    let value = this.get("lockPoolToken");
    return value.toBigDecimal();
  }

  set lockPoolToken(value: BigDecimal) {
    this.set("lockPoolToken", Value.fromBigDecimal(value));
  }

  get unlockPoolToken(): BigDecimal {
    let value = this.get("unlockPoolToken");
    return value.toBigDecimal();
  }

  set unlockPoolToken(value: BigDecimal) {
    this.set("unlockPoolToken", Value.fromBigDecimal(value));
  }

  get lockUSD(): BigDecimal {
    let value = this.get("lockUSD");
    return value.toBigDecimal();
  }

  set lockUSD(value: BigDecimal) {
    this.set("lockUSD", Value.fromBigDecimal(value));
  }

  get unlockUSD(): BigDecimal {
    let value = this.get("unlockUSD");
    return value.toBigDecimal();
  }

  set unlockUSD(value: BigDecimal) {
    this.set("unlockUSD", Value.fromBigDecimal(value));
  }
}

export class Daily extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Daily entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Daily entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Daily", id.toString(), this);
  }

  static load(id: string): Daily | null {
    return store.get("Daily", id) as Daily | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get mintCount(): BigInt {
    let value = this.get("mintCount");
    return value.toBigInt();
  }

  set mintCount(value: BigInt) {
    this.set("mintCount", Value.fromBigInt(value));
  }

  get burnCount(): BigInt {
    let value = this.get("burnCount");
    return value.toBigInt();
  }

  set burnCount(value: BigInt) {
    this.set("burnCount", Value.fromBigInt(value));
  }

  get mintUnboundToken(): BigDecimal {
    let value = this.get("mintUnboundToken");
    return value.toBigDecimal();
  }

  set mintUnboundToken(value: BigDecimal) {
    this.set("mintUnboundToken", Value.fromBigDecimal(value));
  }

  get burnUnboundToken(): BigDecimal {
    let value = this.get("burnUnboundToken");
    return value.toBigDecimal();
  }

  set burnUnboundToken(value: BigDecimal) {
    this.set("burnUnboundToken", Value.fromBigDecimal(value));
  }

  get lockPoolToken(): BigDecimal {
    let value = this.get("lockPoolToken");
    return value.toBigDecimal();
  }

  set lockPoolToken(value: BigDecimal) {
    this.set("lockPoolToken", Value.fromBigDecimal(value));
  }

  get unlockPoolToken(): BigDecimal {
    let value = this.get("unlockPoolToken");
    return value.toBigDecimal();
  }

  set unlockPoolToken(value: BigDecimal) {
    this.set("unlockPoolToken", Value.fromBigDecimal(value));
  }

  get lockUSD(): BigDecimal {
    let value = this.get("lockUSD");
    return value.toBigDecimal();
  }

  set lockUSD(value: BigDecimal) {
    this.set("lockUSD", Value.fromBigDecimal(value));
  }

  get unlockUSD(): BigDecimal {
    let value = this.get("unlockUSD");
    return value.toBigDecimal();
  }

  set unlockUSD(value: BigDecimal) {
    this.set("unlockUSD", Value.fromBigDecimal(value));
  }
}

export class All extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save All entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save All entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("All", id.toString(), this);
  }

  static load(id: string): All | null {
    return store.get("All", id) as All | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mintCount(): BigInt {
    let value = this.get("mintCount");
    return value.toBigInt();
  }

  set mintCount(value: BigInt) {
    this.set("mintCount", Value.fromBigInt(value));
  }

  get burnCount(): BigInt {
    let value = this.get("burnCount");
    return value.toBigInt();
  }

  set burnCount(value: BigInt) {
    this.set("burnCount", Value.fromBigInt(value));
  }

  get mintUnboundToken(): BigDecimal {
    let value = this.get("mintUnboundToken");
    return value.toBigDecimal();
  }

  set mintUnboundToken(value: BigDecimal) {
    this.set("mintUnboundToken", Value.fromBigDecimal(value));
  }

  get burnUnboundToken(): BigDecimal {
    let value = this.get("burnUnboundToken");
    return value.toBigDecimal();
  }

  set burnUnboundToken(value: BigDecimal) {
    this.set("burnUnboundToken", Value.fromBigDecimal(value));
  }

  get lockPoolToken(): BigDecimal {
    let value = this.get("lockPoolToken");
    return value.toBigDecimal();
  }

  set lockPoolToken(value: BigDecimal) {
    this.set("lockPoolToken", Value.fromBigDecimal(value));
  }

  get unlockPoolToken(): BigDecimal {
    let value = this.get("unlockPoolToken");
    return value.toBigDecimal();
  }

  set unlockPoolToken(value: BigDecimal) {
    this.set("unlockPoolToken", Value.fromBigDecimal(value));
  }

  get lockUSD(): BigDecimal {
    let value = this.get("lockUSD");
    return value.toBigDecimal();
  }

  set lockUSD(value: BigDecimal) {
    this.set("lockUSD", Value.fromBigDecimal(value));
  }

  get unlockUSD(): BigDecimal {
    let value = this.get("unlockUSD");
    return value.toBigDecimal();
  }

  set unlockUSD(value: BigDecimal) {
    this.set("unlockUSD", Value.fromBigDecimal(value));
  }
}
