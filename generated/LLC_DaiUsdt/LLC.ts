// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class KillSwitch extends ethereum.Event {
  get params(): KillSwitch__Params {
    return new KillSwitch__Params(this);
  }
}

export class KillSwitch__Params {
  _event: KillSwitch;

  constructor(event: KillSwitch) {
    this._event = event;
  }

  get position(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class LockLPT extends ethereum.Event {
  get params(): LockLPT__Params {
    return new LockLPT__Params(this);
  }
}

export class LockLPT__Params {
  _event: LockLPT;

  constructor(event: LockLPT) {
    this._event = event;
  }

  get LPTamt(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get uToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class UnlockLPT extends ethereum.Event {
  get params(): UnlockLPT__Params {
    return new UnlockLPT__Params(this);
  }
}

export class UnlockLPT__Params {
  _event: UnlockLPT;

  constructor(event: UnlockLPT) {
    this._event = event;
  }

  get LPTamt(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get uToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LLC extends ethereum.SmartContract {
  static bind(address: Address): LLC {
    return new LLC("LLC", address);
  }

  _position(): i32 {
    let result = super.call("_position", "_position():(uint8)", []);

    return result[0].toI32();
  }

  try__position(): ethereum.CallResult<i32> {
    let result = super.tryCall("_position", "_position():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  baseAssetDecimal(): i32 {
    let result = super.call(
      "baseAssetDecimal",
      "baseAssetDecimal():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_baseAssetDecimal(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "baseAssetDecimal",
      "baseAssetDecimal():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  killSwitch(): boolean {
    let result = super.call("killSwitch", "killSwitch():(bool)", []);

    return result[0].toBoolean();
  }

  try_killSwitch(): ethereum.CallResult<boolean> {
    let result = super.tryCall("killSwitch", "killSwitch():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pair(): Address {
    let result = super.call("pair", "pair():(address)", []);

    return result[0].toAddress();
  }

  try_pair(): ethereum.CallResult<Address> {
    let result = super.tryCall("pair", "pair():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uToken(): Address {
    let result = super.call("uToken", "uToken():(address)", []);

    return result[0].toAddress();
  }

  try_uToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("uToken", "uToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokensLocked(account: Address): BigInt {
    let result = super.call("tokensLocked", "tokensLocked(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_tokensLocked(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensLocked",
      "tokensLocked(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get valuingAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get LPTaddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get baseAsset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _uToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class LockLPTWithPermitCall extends ethereum.Call {
  get inputs(): LockLPTWithPermitCall__Inputs {
    return new LockLPTWithPermitCall__Inputs(this);
  }

  get outputs(): LockLPTWithPermitCall__Outputs {
    return new LockLPTWithPermitCall__Outputs(this);
  }
}

export class LockLPTWithPermitCall__Inputs {
  _call: LockLPTWithPermitCall;

  constructor(call: LockLPTWithPermitCall) {
    this._call = call;
  }

  get LPTamt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get minTokenAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class LockLPTWithPermitCall__Outputs {
  _call: LockLPTWithPermitCall;

  constructor(call: LockLPTWithPermitCall) {
    this._call = call;
  }
}

export class LockLPTCall extends ethereum.Call {
  get inputs(): LockLPTCall__Inputs {
    return new LockLPTCall__Inputs(this);
  }

  get outputs(): LockLPTCall__Outputs {
    return new LockLPTCall__Outputs(this);
  }
}

export class LockLPTCall__Inputs {
  _call: LockLPTCall;

  constructor(call: LockLPTCall) {
    this._call = call;
  }

  get LPTamt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LockLPTCall__Outputs {
  _call: LockLPTCall;

  constructor(call: LockLPTCall) {
    this._call = call;
  }
}

export class UnlockLPTCall extends ethereum.Call {
  get inputs(): UnlockLPTCall__Inputs {
    return new UnlockLPTCall__Inputs(this);
  }

  get outputs(): UnlockLPTCall__Outputs {
    return new UnlockLPTCall__Outputs(this);
  }
}

export class UnlockLPTCall__Inputs {
  _call: UnlockLPTCall;

  constructor(call: UnlockLPTCall) {
    this._call = call;
  }

  get LPToken(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnlockLPTCall__Outputs {
  _call: UnlockLPTCall;

  constructor(call: UnlockLPTCall) {
    this._call = call;
  }
}

export class ClaimTokensCall extends ethereum.Call {
  get inputs(): ClaimTokensCall__Inputs {
    return new ClaimTokensCall__Inputs(this);
  }

  get outputs(): ClaimTokensCall__Outputs {
    return new ClaimTokensCall__Outputs(this);
  }
}

export class ClaimTokensCall__Inputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }

  get _tokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimTokensCall__Outputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }
}

export class DisableLockCall extends ethereum.Call {
  get inputs(): DisableLockCall__Inputs {
    return new DisableLockCall__Inputs(this);
  }

  get outputs(): DisableLockCall__Outputs {
    return new DisableLockCall__Outputs(this);
  }
}

export class DisableLockCall__Inputs {
  _call: DisableLockCall;

  constructor(call: DisableLockCall) {
    this._call = call;
  }
}

export class DisableLockCall__Outputs {
  _call: DisableLockCall;

  constructor(call: DisableLockCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetValuingAddressCall extends ethereum.Call {
  get inputs(): SetValuingAddressCall__Inputs {
    return new SetValuingAddressCall__Inputs(this);
  }

  get outputs(): SetValuingAddressCall__Outputs {
    return new SetValuingAddressCall__Outputs(this);
  }
}

export class SetValuingAddressCall__Inputs {
  _call: SetValuingAddressCall;

  constructor(call: SetValuingAddressCall) {
    this._call = call;
  }

  get _newValuing(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetValuingAddressCall__Outputs {
  _call: SetValuingAddressCall;

  constructor(call: SetValuingAddressCall) {
    this._call = call;
  }
}
